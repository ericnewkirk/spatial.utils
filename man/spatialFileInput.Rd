% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/spatialFileInput.r
\name{spatialFileInput}
\alias{spatialFileInput}
\alias{spatialFileInputHandler}
\title{Spatial fileInput}
\usage{
spatialFileInput(
  inputId,
  label,
  accept = c(".geojson", ".kml", ".shp", ".shx", ".dbf", ".prj"),
  ...
)

spatialFileInputHandler(input_value, multiple = FALSE, crs = 4326)
}
\arguments{
\item{inputId}{The \code{input} slot that will be used to access the value.}

\item{label}{Display label for the control, or \code{NULL} for no label.}

\item{accept}{A character vector of "unique file type specifiers" which gives
the browser a hint as to the type of file the server expects. Many browsers
use this prevent the user from selecting an invalid file.

A unique file type specifier can be:
\itemize{
\item A case insensitive extension like \code{.csv} or \code{.rds}.
\item A valid MIME type, like \code{text/plain} or \code{application/pdf}
\item One of \verb{audio/*}, \verb{video/*}, or \verb{image/*} meaning any audio, video,
or image type, respectively.
}}

\item{...}{Additional arguments passed to \code{shiny::fileInput}}

\item{input_value}{The server value produced by the \code{shiny::fileInput}
ui element}

\item{multiple}{Whether multiple spatial datasets are allowed. If
\code{multiple} = \code{FALSE} and more than one dataset is uploaded this
function will return \code{NULL} with a warning. A single uploaded
shapefile counts as one dataset even though it consists of more than one
actual file.}

\item{crs}{The coordinate reference system for the output \code{sf} object,
see \code{\link[sf]{st_crs}}}
}
\value{
\code{shiny::fileInput} ui element

\code{sf} object, or \code{NULL} if A) more than one dataset is
  uploaded and \code{multiple} = \code{FALSE} or B) attempting to read any
  of the uploaded files with \code{sf::st_read} results in an error
}
\description{
A wrapper for \code{\link[shiny]{fileInput}} tailored for uploading spatial
  data. The \code{multiple} argument is always \code{TRUE} to allow users to
  upload shapefiles, and the default for the \code{accept} argument is a
  short list of spatial file extensions including the four required for
  shapefiles. Restricting uploads to a single file can be done with the
  \code{multiple} argument in the paired server function
  \code{spatialFileInputHandler}.
}
\section{Functions}{
\itemize{
\item \code{spatialFileInputHandler()}: 

}}
\examples{

\dontrun{

ui <- shiny::fluidPage(
  shiny::column(
    width = 4,
    spatialFileInput("up_poly", "upload polygons")
  ),
  shiny::column(
    width = 8,
    leaflet::leafletOutput("map")
  )
)

server <- function(input, output, session) {

  output$map <- leaflet::renderLeaflet({
    leaflet::leaflet() |>
      leaflet::addProviderTiles(leaflet::providers$Esri.WorldImagery)
  })

  prx <- leaflet::leafletProxy("map")

  poly <- reactive({
    shiny::req(input$up_poly)
    spatialFileInputHandler(input$up_poly, multiple = TRUE)
  })

  shiny::observeEvent(poly(), {
    shiny::req(poly())

    xy <- sf::st_transform(poly(), 4326)

    bbox <- setNames(sf::st_bbox(xy), NULL)

    prx |>
      leaflet::clearGroup("uploads") |>
      leaflet::addPolygons(
        data = xy,
        group = "uploads"
      ) |>
      leaflet::fitBounds(bbox[1], bbox[2], bbox[3], bbox[4])

  })

}

shiny::shinyApp(ui, server)

}

}
